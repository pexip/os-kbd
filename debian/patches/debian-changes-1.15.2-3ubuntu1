Description: Upstream changes introduced in version 1.15.2-3ubuntu1
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 kbd (1.15.2-3ubuntu1) oneiric; urgency=low
 .
   * Merge from debian unstable (LP: #779388). Remaining changes:
     - Add setfont, kbd_mode, and loadkeys to initramfs for console-setup.
     - Use ckbcomp to get the keyboard layout if other data files are not
       available.
     - Depend on console-setup, and remove config file; we now only
       support systems using console-setup and so it no longer serves
       a purpose. The removed config file for console-screen has changed
       names from /etc/init.d/console-screen.kbd.sh to /etc/init.d/kbd.
     - Change loadkeys to find any console not in raw mode when invoked
       without an explicit console parameter. (In case the foreground
       console is in raw mode.)
     - Add a 'setvtrgb' utility to configure vt/console colors.
   * debian/control:
     - Bump Standards-Version to 3.9.2, no changes needed.
     - Update Build-Depends for debhelper to version 8.1.0.
   * Simplify maintainer scripts for conffile removal, using new
     features in updated version of debhelper.
   * Add 'setvtrgb' manpage to man8 makefile, so it will install.
   * debian/rules: Move 'setvtrgb' binary to extra binaries, as udeb
     binaries are now handled differently.
 .
 The person named in the Author field signed this changelog entry.
Author: Allison Randal <allison@canonical.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/779388

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- kbd-1.15.2.orig/COPYING
+++ kbd-1.15.2/COPYING
@@ -28,6 +28,12 @@ The files
 (and changes to earlier mentioned programs)
 are Copyright (C) 1994-1999 Andries E. Brouwer.
 
+The file
+	setvtrgb.c
+is Copyright (C) 2011 Canonical Ltd.
+     Authors: Seth Forshee <seth.forshee@canonical.com>
+              Dustin Kirkland <kirkland@canonical.com>
+
 All files in this package may be freely copied under the terms
 of the GNU General Public License (GPL), version 2, or at your
 option any later version - except possibly for the restrictions
--- kbd-1.15.2.orig/src/getfd.c
+++ kbd-1.15.2/src/getfd.c
@@ -88,3 +88,61 @@ int getfd(const char *fnam) {
 		_("Couldn't get a file descriptor referring to the console\n"));
 	exit(1);		/* total failure */
 }
+
+static long
+kbmode(int fd) {
+	long mode;
+	if (ioctl(fd, KDGKBMODE, &mode) < 0)
+		return -1;
+	else
+		return mode;
+}
+
+/* Get a file descriptor suitable for setting the keymap.  Anything not in
+ * raw mode will do - it doesn't have to be the foreground console - but we
+ * prefer Unicode if we can get it.
+ */
+int getfd_keymap(void) {
+	int fd, bestfd = -1;
+	char ttyname[sizeof("/dev/ttyNN")] = "/dev/tty";
+	int i;
+
+#define CHECK_FD_KEYMAP do { \
+	if (fd >= 0) { \
+		long mode = kbmode(fd); \
+		if (mode == K_UNICODE) { \
+			if (bestfd != -1) \
+				close(bestfd); \
+			return fd; \
+		} else if (mode == K_XLATE && bestfd == -1) \
+			bestfd = fd; \
+		else \
+			close(fd); \
+	} \
+} while (0)
+
+	fd = open_a_console("/proc/self/fd/0");
+	CHECK_FD_KEYMAP;
+
+	fd = open_a_console("/dev/tty");
+	CHECK_FD_KEYMAP;
+
+	fd = open_a_console("/dev/tty0");
+	CHECK_FD_KEYMAP;
+
+	fd = open_a_console("/dev/vc/0");
+	CHECK_FD_KEYMAP;
+
+	fd = open_a_console("/dev/console");
+	CHECK_FD_KEYMAP;
+
+	for (i = 1; i <= 12; ++i) {
+		snprintf(ttyname + sizeof("/dev/tty") - 1, 3, "%d", i);
+		fd = open_a_console(ttyname);
+		CHECK_FD_KEYMAP;
+	}
+
+	fprintf(stderr,
+		_("Couldn't get a file descriptor referring to the console\n"));
+	exit(1);		/* total failure */
+}
--- /dev/null
+++ kbd-1.15.2/src/setvtrgb.c
@@ -0,0 +1,136 @@
+/*
+ *    setvtrgb - set the virtual terminal RGB colors
+ *    Copyright (C) 2011 Canonical Ltd.
+ *
+ *    Authors: Seth Forshee <seth.forshee@canonical.com>
+ *	       Dustin Kirkland <kirkland@canonical.com>
+ *
+ *    This program is free software; you can redistribute it and/or modify
+ *    it under the terms of the GNU General Public License as published by
+ *    the Free Software Foundation; either version 2 of the License, or
+ *    (at your option) any later version.
+ *   
+ *    This program is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *    GNU General Public License for more details.
+ * 
+ *    You should have received a copy of the GNU General Public License along
+ *    with this program; if not, write to the Free Software Foundation, Inc.,
+ *    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <linux/kd.h>
+#include <errno.h>
+
+/* Standard VGA terminal colors, matching those hardcoded in the Linux kernel's
+ * drivers/tty/vt/vt.c
+ */
+unsigned char vga_colors[] = {
+	0x00, 0x00, 0x00,
+	0xaa, 0x00, 0x00,
+	0x00, 0xaa, 0x00,
+	0xaa, 0x55, 0x00,
+	0x00, 0x00, 0xaa,
+	0xaa, 0x00, 0xaa,
+	0x00, 0xaa, 0xaa,
+	0xaa, 0xaa, 0xaa,
+	0x55, 0x55, 0x55,
+	0xff, 0x55, 0x55,
+	0x55, 0xff, 0x55,
+	0xff, 0xff, 0x55,
+	0x55, 0x55, 0xff,
+	0xff, 0x55, 0xff,
+	0x55, 0xff, 0xff,
+	0xff, 0xff, 0xff,
+};
+
+/* Usage statement */
+void usage(void) {
+	fprintf(stderr,
+"\nUSAGE: setvtrgb vga|[FILE]\n"
+"\n"
+"If you use the FILE parameter, FILE should be exactly 3 lines of\n"
+"comma-separated decimal values for RED, GREEN, and BLUE.\n"
+"\n"
+"To seed a valid FILE:\n"
+"  cat /sys/module/vt/parameters/default_{red,grn,blu} > FILE\n"
+"\n"
+"And then edit the values in FILE.\n\n"
+);
+	exit(EINVAL);
+}
+
+int main(int argc, const char *argv[]) {
+	int fd;
+	FILE *fp = NULL;
+	int i, j;
+	char *c;
+	unsigned char *cmap;
+	char s[1024];
+
+	/* Must have at least one argument */
+	if (argc != 2)
+		usage();
+
+	if (strcmp(argv[1], "vga") == 0)
+		/* Use the Standard VGA colors */
+		cmap = vga_colors;
+	else if (fp = fopen(argv[1], "r" )) {
+		/* Use a color palette specified in a file */
+		/* Allocate a 48 character array */
+		cmap = calloc(3*16, sizeof(unsigned char));
+		for (i=0; i<3; i++) {
+			j = 0;
+			/* Retrieve a line from file */
+			/* Tokenize the CSV string, convert to int, then to char */
+			if (fgets(s, sizeof(s), fp)) {
+				if ((c = strtok(s, ",")) != NULL)
+					cmap[i+j*3] = (unsigned char)atoi(c);
+				else {
+					fprintf(stderr, "ERROR: Error reading color value at line [%d], position [%d], file [%s]\n", i+1, 1, argv[1]);
+					usage();
+				}
+				for (j=1; j<16; j++) {
+					if ((c = strtok(NULL, ",")) != NULL)
+						cmap[i+j*3] = (unsigned char)atoi(c);
+					else {
+						fprintf(stderr, "ERROR: Error reading color value at line [%d], position [%d], file [%s]\n", i+1, j+1, argv[1]);
+						usage();
+					}
+				}
+			} else {
+				fprintf(stderr, "ERROR: Invalid file at [%s]\n", argv[1]);
+				usage();
+			}
+		}
+		fclose(fp);
+	} else {
+		perror(argv[1]);
+		usage();
+	}
+
+	/* Ensure that this user can open tty, before going further */
+	fd = open("/dev/tty0", O_RDONLY);
+	if (fd < 0) {
+		perror(argv[1]);
+		exit(errno);
+	}
+
+	/* Apply the color map to the tty via ioctl */
+	if (ioctl(fd, PIO_CMAP, cmap) < 0) {
+		perror("ioctl");
+		exit(errno);
+	}
+	close(fd);
+	return(0);
+}
--- kbd-1.15.2.orig/src/getfd.h
+++ kbd-1.15.2/src/getfd.h
@@ -2,5 +2,6 @@
 #define _GETFD_H
 
 extern int getfd(const char *fnam);
+extern int getfd_keymap(void);
 
 #endif /* _GETFD_H */
--- kbd-1.15.2.orig/src/Makefile.am
+++ kbd-1.15.2/src/Makefile.am
@@ -8,7 +8,7 @@ AM_CPPFLAGS = -DDATADIR=\"$(datadir)\" -
 OLDPROGS = mapscrn loadunimap
 PROGS = \
 	dumpkeys loadkeys showkey setfont showconsolefont \
-	setleds setmetamode kbd_mode psfxtable fgconsole
+	setleds setmetamode kbd_mode psfxtable fgconsole setvtrgb
 
 if !KLIBC
 PROGS += kbdrate chvt deallocvt openvt
@@ -70,6 +70,7 @@ resizecons_SOURCES      = $(ALL_S) resiz
 screendump_SOURCES      = $(ALL_S) screendump.c $(XMAL_S)
 setfont_SOURCES         = $(ALL_S) setfont.c $(FIND_S) $(XMAL_S) $(GETFD_S) mapscrn.c $(KDMA_S) $(PSF_S) $(UTF8_S) kdfontop.c kdfontop.h $(UNIM_S) $(KLIBC_S)
 setkeycodes_SOURCES     = $(ALL_S) setkeycodes.c $(GETFD_S)
+setvtrgb_SOURCES        = $(ALL_S) setvtrgb.c $(GETFD_S)
 setlogcons_SOURCES      = $(ALL_S) setlogcons.c $(GETFD_S)
 setpalette_SOURCES      = $(ALL_S) setpalette.c $(GETFD_S)
 setvesablank_SOURCES    = $(ALL_S) setvesablank.c $(GETFD_S)
--- kbd-1.15.2.orig/src/loadkeys.c
+++ kbd-1.15.2/src/loadkeys.c
@@ -2415,8 +2415,47 @@ yywrap(void) {
 		f = stdin;
 		strcpy(pathname, "<stdin>");
 	} else if ((f = findfile(*args, dirpath, suffixes)) == NULL) {
-		fprintf(stderr, _("cannot open file %s\n"), *args);
-		exit(1);
+		/* Try ckbcomp, but only if the keymap name is sane. */
+		const char *unsafe;
+		for (unsafe = *args; *unsafe; ++unsafe)
+			if (!isalpha((unsigned char)*unsafe) &&
+			    !isdigit((unsigned char)*unsafe) &&
+			    /* - and _ in variant names; / in a layout name;
+			       : as separator */
+			    !strchr("-/_:", *unsafe))
+				break;
+		if (!*unsafe) {
+			char *layout, *variant;
+			char *colon;
+			size_t cmdsize;
+			char *cmd;
+			layout = strdup(*args);
+			colon = strchr(layout, ':');
+			if (colon) {
+				*colon = '\0';
+				variant = strdup(colon + 1);
+			} else
+				variant = NULL;
+			cmdsize = sizeof("ckbcomp -model pc105 ") +
+			          strlen(layout);
+			if (variant) {
+				cmdsize += 1 + strlen(variant);
+				cmd = xmalloc(cmdsize);
+				sprintf(cmd, "ckbcomp -model pc105 %s %s",
+				        layout, variant);
+			} else {
+				cmd = xmalloc(cmdsize);
+				sprintf(cmd, "ckbcomp -model pc105 %s",
+				        layout);
+			}
+			f = popen(cmd, "r");
+			free(cmd);
+			free(variant);
+			free(layout);
+		} else {
+			fprintf(stderr, _("cannot open file %s\n"), *args);
+			exit(1);
+		}
 	}
 	/*
 		Can't use yyrestart if this is called before entering yyparse()
--- kbd-1.15.2.orig/src/loadkeys.y
+++ kbd-1.15.2/src/loadkeys.y
@@ -369,17 +369,18 @@ main(int argc, char *argv[]) {
 	prefer_unicode = optu;
 	if (!optm) {
 		/* check whether the keyboard is in Unicode mode */
-		fd = getfd(NULL);
-		if (ioctl(fd, KDGKBMODE, &kbd_mode)) {
-			perror("KDGKBMODE");
-			fprintf(stderr, _("%s: error reading keyboard mode\n"), progname);
-			exit(1);
-		}
-
-		if (kbd_mode == K_UNICODE) {
-			prefer_unicode = 1;
-			/* reset -u option if keyboard is in K_UNICODE anyway */
-			optu = 0;
+		fd = getfd_keymap();
+		if (!optu) {
+			if (ioctl(fd, KDGKBMODE, &kbd_mode)) {
+				perror("KDGKBMODE");
+				fprintf(stderr, _("%s: error reading keyboard mode\n"), progname);
+				exit(1);
+			}
+			if (kbd_mode == K_UNICODE)
+				set_charset("unicode");
+				prefer_unicode = 1;
+				/* reset -u option if keyboard is in K_UNICODE anyway */
+				optu = 0;
 		}
 		else if (optu && (ioctl(fd, KDGETMODE, &kd_mode) || (kd_mode != KD_GRAPHICS)))
 			fprintf(stderr, _("%s: warning: loading Unicode keymap on non-Unicode console\n"
@@ -692,8 +693,47 @@ yywrap(void) {
 		f = stdin;
 		strcpy(pathname, "<stdin>");
 	} else if ((f = findfile(*args, dirpath, suffixes)) == NULL) {
-		fprintf(stderr, _("cannot open file %s\n"), *args);
-		exit(1);
+		/* Try ckbcomp, but only if the keymap name is sane. */
+		const char *unsafe;
+		for (unsafe = *args; *unsafe; ++unsafe)
+			if (!isalpha((unsigned char)*unsafe) &&
+			    !isdigit((unsigned char)*unsafe) &&
+			    /* - and _ in variant names; / in a layout name;
+			       : as separator */
+			    !strchr("-/_:", *unsafe))
+				break;
+		if (!*unsafe) {
+			char *layout, *variant;
+			char *colon;
+			size_t cmdsize;
+			char *cmd;
+			layout = strdup(*args);
+			colon = strchr(layout, ':');
+			if (colon) {
+				*colon = '\0';
+				variant = strdup(colon + 1);
+			} else
+				variant = NULL;
+			cmdsize = sizeof("ckbcomp -model pc105 ") +
+			          strlen(layout);
+			if (variant) {
+				cmdsize += 1 + strlen(variant);
+				cmd = xmalloc(cmdsize);
+				sprintf(cmd, "ckbcomp -model pc105 %s %s",
+				        layout, variant);
+			} else {
+				cmd = xmalloc(cmdsize);
+				sprintf(cmd, "ckbcomp -model pc105 %s",
+				        layout);
+			}
+			f = popen(cmd, "r");
+			free(cmd);
+			free(variant);
+			free(layout);
+		} else {
+			fprintf(stderr, _("cannot open file %s\n"), *args);
+			exit(1);
+		}
 	}
 	/*
 		Can't use yyrestart if this is called before entering yyparse()
@@ -1106,7 +1146,10 @@ loadkeys (char *console, int kbd_mode) {
         int fd;
         int keyct, funcct, diacct = 0;
 
-	fd = getfd(console);
+	if (console)
+		fd = getfd(console);
+	else
+		fd = getfd_keymap();
 	keyct = defkeys(fd, kbd_mode);
 	funcct = deffuncs(fd);
 	if (verbose) {
--- /dev/null
+++ kbd-1.15.2/man/man8/setvtrgb.8
@@ -0,0 +1,21 @@
+.\" @(#)man/man8/setvtrgb.8	1.0 Mar  3 12:32:18 CST 2011
+.TH SETVTRGB 8 "3 Mar 2011" "Set Virtual Terminal RGB Colors"
+.SH NAME
+setvtrgb \- set the virtual terminal RGB colors
+.SH SYNOPSIS
+.B setvtrgb
+.I vga|[FILE]
+.SH DESCRIPTION
+The
+.I setvtrgb
+command takes a single argument, either the string "vga", or a path to a file containing the red, green, and blue colors to be used by the Linux virtual terminals.
+
+If you use the FILE parameter, FILE should be exactly 3 lines of 16 comma-separated decimal values for RED, GREEN, and BLUE.
+
+To seed a valid FILE:
+  cat /sys/module/vt/parameters/default_{red,grn,blu} > FILE
+
+And then edit the values in FILE.
+
+.SH AUTHOR
+This manpage and the utility were written by Dustin Kirkland <kirkland@canonical.com> for Ubuntu systems (but may be used by others).   Permission is  granted to copy, distribute and/or modify this document and the utility under the terms of the GNU General Public License, Version 2 or any later version published by the Free Software Foundation.  The complete text  of  the  GNU  General  Public  License  can  be  found  in  /usr/share/common-licenses/GPL-2  on  Debian/Ubuntu  systems, or on the web at http://www.gnu.org/licenses/gpl2.txt.
--- kbd-1.15.2.orig/man/man8/Makefile.in
+++ kbd-1.15.2/man/man8/Makefile.in
@@ -195,7 +195,7 @@ top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 gen_MANS = loadunimap.8 mapscrn.8 setfont.8
 dist_man_MANS = getkeycodes.8 kbdrate.8 resizecons.8 setkeycodes.8 \
-		showconsolefont.8 $(gen_MANS)
+		showconsolefont.8 setvtrgb.8 $(gen_MANS)
 
 all: all-am
 
--- kbd-1.15.2.orig/man/man8/Makefile.am
+++ kbd-1.15.2/man/man8/Makefile.am
@@ -1,6 +1,6 @@
 gen_MANS = loadunimap.8 mapscrn.8 setfont.8
 dist_man_MANS = getkeycodes.8 kbdrate.8 resizecons.8 setkeycodes.8 \
-		showconsolefont.8 $(gen_MANS)
+		showconsolefont.8 setvtrgb.8 $(gen_MANS)
 
 install-data-hook:
 	cd $(DESTDIR)$(mandir)/man8 && \
